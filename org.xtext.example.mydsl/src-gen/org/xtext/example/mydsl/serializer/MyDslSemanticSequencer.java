/*
 * generated by Xtext 2.11.0-SNAPSHOT
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.DeclaredParameter;
import org.xtext.example.mydsl.myDsl.Division;
import org.xtext.example.mydsl.myDsl.Factor;
import org.xtext.example.mydsl.myDsl.Function;
import org.xtext.example.mydsl.myDsl.Layer;
import org.xtext.example.mydsl.myDsl.LayerDeclaration;
import org.xtext.example.mydsl.myDsl.LayerRef;
import org.xtext.example.mydsl.myDsl.LayerTuple;
import org.xtext.example.mydsl.myDsl.Minus;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.Multiply;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Network;
import org.xtext.example.mydsl.myDsl.Plus;
import org.xtext.example.mydsl.myDsl.VariableAssignment;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.DECLARED_PARAMETER:
				sequence_DeclaredParameter(context, (DeclaredParameter) semanticObject); 
				return; 
			case MyDslPackage.DIVISION:
				sequence_Term(context, (Division) semanticObject); 
				return; 
			case MyDslPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case MyDslPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case MyDslPackage.LAYER:
				sequence_Layer(context, (Layer) semanticObject); 
				return; 
			case MyDslPackage.LAYER_DECLARATION:
				sequence_LayerDeclaration(context, (LayerDeclaration) semanticObject); 
				return; 
			case MyDslPackage.LAYER_REF:
				sequence_LayerRef(context, (LayerRef) semanticObject); 
				return; 
			case MyDslPackage.LAYER_TUPLE:
				sequence_LayerTuple(context, (LayerTuple) semanticObject); 
				return; 
			case MyDslPackage.MINUS:
				sequence_Expression(context, (Minus) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.MULTIPLY:
				sequence_Term(context, (Multiply) semanticObject); 
				return; 
			case MyDslPackage.NETWORK:
				sequence_Network(context, (Network) semanticObject); 
				return; 
			case MyDslPackage.PLUS:
				sequence_Expression(context, (Plus) semanticObject); 
				return; 
			case MyDslPackage.VARIABLE_ASSIGNMENT:
				sequence_VariableAssignment(context, (VariableAssignment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DeclaredParameter returns DeclaredParameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DeclaredParameter(ISerializationContext context, DeclaredParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DECLARED_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DECLARED_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Minus
	 *     Expression returns Minus
	 *     Expression.Plus_1_0_0_0 returns Minus
	 *     Expression.Minus_1_0_1_0 returns Minus
	 *
	 * Constraint:
	 *     (left=Expression_Minus_1_0_1_0 right=Term)
	 */
	protected void sequence_Expression(ISerializationContext context, Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getMinusLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Plus
	 *     Expression returns Plus
	 *     Expression.Plus_1_0_0_0 returns Plus
	 *     Expression.Minus_1_0_1_0 returns Plus
	 *
	 * Constraint:
	 *     (left=Expression_Plus_1_0_0_0 right=Term)
	 */
	protected void sequence_Expression(ISerializationContext context, Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getPlusLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpressionAccess().getRightTermParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Factor
	 *     Expression returns Factor
	 *     Expression.Plus_1_0_0_0 returns Factor
	 *     Expression.Minus_1_0_1_0 returns Factor
	 *     Term returns Factor
	 *     Term.Multiply_1_0_0_0 returns Factor
	 *     Term.Division_1_0_1_0 returns Factor
	 *     Factor returns Factor
	 *
	 * Constraint:
	 *     (number=REAL | variable=ID | expression=Expression)
	 */
	protected void sequence_Factor(ISerializationContext context, Factor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Function
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID (args+=DeclaredParameter args+=DeclaredParameter*)? expr=Expression)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerDeclaration returns LayerDeclaration
	 *
	 * Constraint:
	 *     (layerTuple+=LayerTuple | (layerTuple+=LayerTuple layerTuple+=LayerTuple*) | (layerMultiplier=INTEGER layerTuple+=LayerTuple))
	 */
	protected void sequence_LayerDeclaration(ISerializationContext context, LayerDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerRef returns LayerRef
	 *
	 * Constraint:
	 *     (value=INTEGER | ref=ID)
	 */
	protected void sequence_LayerRef(ISerializationContext context, LayerRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayerTuple returns LayerTuple
	 *
	 * Constraint:
	 *     ((ref=ID? in=LayerRef? out=LayerRef) | (in=LayerRef? out=LayerRef) | out=LayerRef)
	 */
	protected void sequence_LayerTuple(ISerializationContext context, LayerTuple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layer returns Layer
	 *
	 * Constraint:
	 *     ((weightInit=WeightInitType | biasInit=REAL)? (layerDecl=LayerDeclaration layerType=LayerType activType=ActivationFunctionType?)?)+
	 */
	protected void sequence_Layer(ISerializationContext context, Layer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     network=Network
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MODEL__NETWORK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MODEL__NETWORK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getNetworkNetworkParserRuleCall_0(), semanticObject.getNetwork());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Network returns Network
	 *
	 * Constraint:
	 *     (name=ID | epochs=INTEGER | seed=ZINTEGER | updaterType=UpdaterType | (learningRate=VariableAssignment layers+=Layer*))+
	 */
	protected void sequence_Network(ISerializationContext context, Network semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Division
	 *     Expression returns Division
	 *     Expression.Plus_1_0_0_0 returns Division
	 *     Expression.Minus_1_0_1_0 returns Division
	 *     Term returns Division
	 *     Term.Multiply_1_0_0_0 returns Division
	 *     Term.Division_1_0_1_0 returns Division
	 *
	 * Constraint:
	 *     (left=Term_Division_1_0_1_0 right=Factor)
	 */
	protected void sequence_Term(ISerializationContext context, Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIVISION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIVISION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns Multiply
	 *     Expression returns Multiply
	 *     Expression.Plus_1_0_0_0 returns Multiply
	 *     Expression.Minus_1_0_1_0 returns Multiply
	 *     Term returns Multiply
	 *     Term.Multiply_1_0_0_0 returns Multiply
	 *     Term.Division_1_0_1_0 returns Multiply
	 *
	 * Constraint:
	 *     (left=Term_Multiply_1_0_0_0 right=Factor)
	 */
	protected void sequence_Term(ISerializationContext context, Multiply semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MULTIPLY__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MULTIPLY__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MULTIPLY__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MULTIPLY__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getTermAccess().getRightFactorParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns VariableAssignment
	 *
	 * Constraint:
	 *     value=INTEGER
	 */
	protected void sequence_VariableAssignment(ISerializationContext context, VariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.VARIABLE_ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.VARIABLE_ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAssignmentAccess().getValueINTEGERTerminalRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
