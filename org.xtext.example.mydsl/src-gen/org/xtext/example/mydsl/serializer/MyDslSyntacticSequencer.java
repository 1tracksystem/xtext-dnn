/*
 * generated by Xtext 2.11.0-SNAPSHOT
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Layer_RightCurlyBracketKeyword_2_1_a;
	protected AbstractElementAlias match_Layer_RightCurlyBracketKeyword_2_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Layer_RightCurlyBracketKeyword_2_1_a = new TokenAlias(true, true, grammarAccess.getLayerAccess().getRightCurlyBracketKeyword_2_1());
		match_Layer_RightCurlyBracketKeyword_2_1_p = new TokenAlias(true, false, grammarAccess.getLayerAccess().getRightCurlyBracketKeyword_2_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getASSIGNRule())
			return getASSIGNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREFERENCERule())
			return getREFERENCEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ASSIGN:
	 * 	'='
	 * ;
	 */
	protected String getASSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal REFERENCE:
	 * 	'->'
	 * ;
	 */
	protected String getREFERENCEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Layer_RightCurlyBracketKeyword_2_1_a.equals(syntax))
				emit_Layer_RightCurlyBracketKeyword_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Layer_RightCurlyBracketKeyword_2_1_p.equals(syntax))
				emit_Layer_RightCurlyBracketKeyword_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'biasInit' ASSIGN biasInit=REAL
	 *     (rule start) (ambiguity) 'layer' layerDecl=LayerDeclaration
	 *     (rule start) (ambiguity) 'weightsInit' REFERENCE weightInit=WeightInitType
	 *     (rule start) (ambiguity) (rule start)
	 *     activType=ActivationFunctionType (ambiguity) 'biasInit' ASSIGN biasInit=REAL
	 *     activType=ActivationFunctionType (ambiguity) 'layer' layerDecl=LayerDeclaration
	 *     activType=ActivationFunctionType (ambiguity) 'weightsInit' REFERENCE weightInit=WeightInitType
	 *     activType=ActivationFunctionType (ambiguity) (rule end)
	 *     layerType=LayerType (ambiguity) 'biasInit' ASSIGN biasInit=REAL
	 *     layerType=LayerType (ambiguity) 'layer' layerDecl=LayerDeclaration
	 *     layerType=LayerType (ambiguity) 'weightsInit' REFERENCE weightInit=WeightInitType
	 *     layerType=LayerType (ambiguity) (rule end)
	 *     weightInit=WeightInitType (ambiguity) 'biasInit' ASSIGN biasInit=REAL
	 *     weightInit=WeightInitType (ambiguity) 'layer' layerDecl=LayerDeclaration
	 *     weightInit=WeightInitType (ambiguity) 'weightsInit' REFERENCE weightInit=WeightInitType
	 *     weightInit=WeightInitType (ambiguity) (rule end)
	 */
	protected void emit_Layer_RightCurlyBracketKeyword_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     biasInit=REAL (ambiguity) 'biasInit' ASSIGN biasInit=REAL
	 *     biasInit=REAL (ambiguity) 'layer' layerDecl=LayerDeclaration
	 *     biasInit=REAL (ambiguity) 'weightsInit' REFERENCE weightInit=WeightInitType
	 *     biasInit=REAL (ambiguity) (rule end)
	 */
	protected void emit_Layer_RightCurlyBracketKeyword_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
