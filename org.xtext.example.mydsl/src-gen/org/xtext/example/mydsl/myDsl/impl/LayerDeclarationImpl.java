/**
 * generated by Xtext 2.11.0-SNAPSHOT
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.LayerDeclaration;
import org.xtext.example.mydsl.myDsl.LayerTuple;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Layer Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.LayerDeclarationImpl#getLayerTuple <em>Layer Tuple</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.LayerDeclarationImpl#getLayerMultiplier <em>Layer Multiplier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LayerDeclarationImpl extends MinimalEObjectImpl.Container implements LayerDeclaration
{
  /**
   * The cached value of the '{@link #getLayerTuple() <em>Layer Tuple</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLayerTuple()
   * @generated
   * @ordered
   */
  protected EList<LayerTuple> layerTuple;

  /**
   * The default value of the '{@link #getLayerMultiplier() <em>Layer Multiplier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLayerMultiplier()
   * @generated
   * @ordered
   */
  protected static final String LAYER_MULTIPLIER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLayerMultiplier() <em>Layer Multiplier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLayerMultiplier()
   * @generated
   * @ordered
   */
  protected String layerMultiplier = LAYER_MULTIPLIER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LayerDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LAYER_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<LayerTuple> getLayerTuple()
  {
    if (layerTuple == null)
    {
      layerTuple = new EObjectContainmentEList<LayerTuple>(LayerTuple.class, this, MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE);
    }
    return layerTuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLayerMultiplier()
  {
    return layerMultiplier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLayerMultiplier(String newLayerMultiplier)
  {
    String oldLayerMultiplier = layerMultiplier;
    layerMultiplier = newLayerMultiplier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LAYER_DECLARATION__LAYER_MULTIPLIER, oldLayerMultiplier, layerMultiplier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE:
        return ((InternalEList<?>)getLayerTuple()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE:
        return getLayerTuple();
      case MyDslPackage.LAYER_DECLARATION__LAYER_MULTIPLIER:
        return getLayerMultiplier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE:
        getLayerTuple().clear();
        getLayerTuple().addAll((Collection<? extends LayerTuple>)newValue);
        return;
      case MyDslPackage.LAYER_DECLARATION__LAYER_MULTIPLIER:
        setLayerMultiplier((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE:
        getLayerTuple().clear();
        return;
      case MyDslPackage.LAYER_DECLARATION__LAYER_MULTIPLIER:
        setLayerMultiplier(LAYER_MULTIPLIER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LAYER_DECLARATION__LAYER_TUPLE:
        return layerTuple != null && !layerTuple.isEmpty();
      case MyDslPackage.LAYER_DECLARATION__LAYER_MULTIPLIER:
        return LAYER_MULTIPLIER_EDEFAULT == null ? layerMultiplier != null : !LAYER_MULTIPLIER_EDEFAULT.equals(layerMultiplier);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (layerMultiplier: ");
    result.append(layerMultiplier);
    result.append(')');
    return result.toString();
  }

} //LayerDeclarationImpl
