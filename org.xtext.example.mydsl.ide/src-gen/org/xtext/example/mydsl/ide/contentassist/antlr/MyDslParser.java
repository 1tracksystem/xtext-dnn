/*
 * generated by Xtext 2.11.0-SNAPSHOT
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getLayerDeclarationAccess().getAlternatives(), "rule__LayerDeclaration__Alternatives");
					put(grammarAccess.getLayerTupleAccess().getAlternatives(), "rule__LayerTuple__Alternatives");
					put(grammarAccess.getLayerRefAccess().getAlternatives(), "rule__LayerRef__Alternatives");
					put(grammarAccess.getVariableAssignmentAccess().getAlternatives(), "rule__VariableAssignment__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives_1_0(), "rule__Expression__Alternatives_1_0");
					put(grammarAccess.getTermAccess().getAlternatives_1_0(), "rule__Term__Alternatives_1_0");
					put(grammarAccess.getFactorAccess().getAlternatives(), "rule__Factor__Alternatives");
					put(grammarAccess.getLayerTypeAccess().getAlternatives(), "rule__LayerType__Alternatives");
					put(grammarAccess.getActivationFunctionTypeAccess().getAlternatives(), "rule__ActivationFunctionType__Alternatives");
					put(grammarAccess.getUpdaterTypeAccess().getAlternatives(), "rule__UpdaterType__Alternatives");
					put(grammarAccess.getWeightInitTypeAccess().getAlternatives(), "rule__WeightInitType__Alternatives");
					put(grammarAccess.getNetworkAccess().getGroup_0(), "rule__Network__Group_0__0");
					put(grammarAccess.getNetworkAccess().getGroup_1(), "rule__Network__Group_1__0");
					put(grammarAccess.getNetworkAccess().getGroup_2(), "rule__Network__Group_2__0");
					put(grammarAccess.getNetworkAccess().getGroup_3(), "rule__Network__Group_3__0");
					put(grammarAccess.getNetworkAccess().getGroup_4(), "rule__Network__Group_4__0");
					put(grammarAccess.getLayerAccess().getGroup_0(), "rule__Layer__Group_0__0");
					put(grammarAccess.getLayerAccess().getGroup_0_6(), "rule__Layer__Group_0_6__0");
					put(grammarAccess.getLayerAccess().getGroup_1(), "rule__Layer__Group_1__0");
					put(grammarAccess.getLayerAccess().getGroup_2(), "rule__Layer__Group_2__0");
					put(grammarAccess.getLayerAccess().getGroup_2_0(), "rule__Layer__Group_2_0__0");
					put(grammarAccess.getLayerDeclarationAccess().getGroup_1(), "rule__LayerDeclaration__Group_1__0");
					put(grammarAccess.getLayerDeclarationAccess().getGroup_1_2(), "rule__LayerDeclaration__Group_1_2__0");
					put(grammarAccess.getLayerDeclarationAccess().getGroup_2(), "rule__LayerDeclaration__Group_2__0");
					put(grammarAccess.getLayerTupleAccess().getGroup_0(), "rule__LayerTuple__Group_0__0");
					put(grammarAccess.getLayerTupleAccess().getGroup_0_1(), "rule__LayerTuple__Group_0_1__0");
					put(grammarAccess.getLayerTupleAccess().getGroup_0_2(), "rule__LayerTuple__Group_0_2__0");
					put(grammarAccess.getLayerTupleAccess().getGroup_1(), "rule__LayerTuple__Group_1__0");
					put(grammarAccess.getLayerTupleAccess().getGroup_2(), "rule__LayerTuple__Group_2__0");
					put(grammarAccess.getLayerRefAccess().getGroup_1(), "rule__LayerRef__Group_1__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_1(), "rule__Function__Group_1__0");
					put(grammarAccess.getFunctionAccess().getGroup_1_2(), "rule__Function__Group_1_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_0(), "rule__Expression__Group_1_0_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_1(), "rule__Expression__Group_1_0_1__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_1_0_0(), "rule__Term__Group_1_0_0__0");
					put(grammarAccess.getTermAccess().getGroup_1_0_1(), "rule__Term__Group_1_0_1__0");
					put(grammarAccess.getFactorAccess().getGroup_2(), "rule__Factor__Group_2__0");
					put(grammarAccess.getModelAccess().getNetworkAssignment(), "rule__Model__NetworkAssignment");
					put(grammarAccess.getNetworkAccess().getNameAssignment_0_1(), "rule__Network__NameAssignment_0_1");
					put(grammarAccess.getNetworkAccess().getEpochsAssignment_1_2(), "rule__Network__EpochsAssignment_1_2");
					put(grammarAccess.getNetworkAccess().getSeedAssignment_2_2(), "rule__Network__SeedAssignment_2_2");
					put(grammarAccess.getNetworkAccess().getUpdaterTypeAssignment_3_2(), "rule__Network__UpdaterTypeAssignment_3_2");
					put(grammarAccess.getNetworkAccess().getLearningRateAssignment_4_2(), "rule__Network__LearningRateAssignment_4_2");
					put(grammarAccess.getNetworkAccess().getLayersAssignment_4_3(), "rule__Network__LayersAssignment_4_3");
					put(grammarAccess.getLayerAccess().getLayerDeclAssignment_0_1(), "rule__Layer__LayerDeclAssignment_0_1");
					put(grammarAccess.getLayerAccess().getLayerTypeAssignment_0_5(), "rule__Layer__LayerTypeAssignment_0_5");
					put(grammarAccess.getLayerAccess().getActivTypeAssignment_0_6_2(), "rule__Layer__ActivTypeAssignment_0_6_2");
					put(grammarAccess.getLayerAccess().getWeightInitAssignment_1_2(), "rule__Layer__WeightInitAssignment_1_2");
					put(grammarAccess.getLayerAccess().getBiasInitAssignment_2_0_2(), "rule__Layer__BiasInitAssignment_2_0_2");
					put(grammarAccess.getLayerDeclarationAccess().getLayerTupleAssignment_0(), "rule__LayerDeclaration__LayerTupleAssignment_0");
					put(grammarAccess.getLayerDeclarationAccess().getLayerTupleAssignment_1_1(), "rule__LayerDeclaration__LayerTupleAssignment_1_1");
					put(grammarAccess.getLayerDeclarationAccess().getLayerTupleAssignment_1_2_1(), "rule__LayerDeclaration__LayerTupleAssignment_1_2_1");
					put(grammarAccess.getLayerDeclarationAccess().getLayerMultiplierAssignment_2_1(), "rule__LayerDeclaration__LayerMultiplierAssignment_2_1");
					put(grammarAccess.getLayerDeclarationAccess().getLayerTupleAssignment_2_4(), "rule__LayerDeclaration__LayerTupleAssignment_2_4");
					put(grammarAccess.getLayerTupleAccess().getRefAssignment_0_1_2(), "rule__LayerTuple__RefAssignment_0_1_2");
					put(grammarAccess.getLayerTupleAccess().getInAssignment_0_2_2(), "rule__LayerTuple__InAssignment_0_2_2");
					put(grammarAccess.getLayerTupleAccess().getOutAssignment_0_5(), "rule__LayerTuple__OutAssignment_0_5");
					put(grammarAccess.getLayerTupleAccess().getInAssignment_1_1(), "rule__LayerTuple__InAssignment_1_1");
					put(grammarAccess.getLayerTupleAccess().getOutAssignment_1_3(), "rule__LayerTuple__OutAssignment_1_3");
					put(grammarAccess.getLayerTupleAccess().getOutAssignment_2_1(), "rule__LayerTuple__OutAssignment_2_1");
					put(grammarAccess.getLayerRefAccess().getValueAssignment_0(), "rule__LayerRef__ValueAssignment_0");
					put(grammarAccess.getLayerRefAccess().getRefAssignment_1_1(), "rule__LayerRef__RefAssignment_1_1");
					put(grammarAccess.getVariableAssignmentAccess().getValueAssignment_0(), "rule__VariableAssignment__ValueAssignment_0");
					put(grammarAccess.getFunctionAccess().getNameAssignment_0(), "rule__Function__NameAssignment_0");
					put(grammarAccess.getFunctionAccess().getArgsAssignment_1_1(), "rule__Function__ArgsAssignment_1_1");
					put(grammarAccess.getFunctionAccess().getArgsAssignment_1_2_1(), "rule__Function__ArgsAssignment_1_2_1");
					put(grammarAccess.getFunctionAccess().getExprAssignment_3(), "rule__Function__ExprAssignment_3");
					put(grammarAccess.getDeclaredParameterAccess().getNameAssignment(), "rule__DeclaredParameter__NameAssignment");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
					put(grammarAccess.getTermAccess().getRightAssignment_1_1(), "rule__Term__RightAssignment_1_1");
					put(grammarAccess.getFactorAccess().getNumberAssignment_0(), "rule__Factor__NumberAssignment_0");
					put(grammarAccess.getFactorAccess().getVariableAssignment_1(), "rule__Factor__VariableAssignment_1");
					put(grammarAccess.getFactorAccess().getExpressionAssignment_2_1(), "rule__Factor__ExpressionAssignment_2_1");
					put(grammarAccess.getNetworkAccess().getUnorderedGroup(), "rule__Network__UnorderedGroup");
					put(grammarAccess.getLayerAccess().getUnorderedGroup(), "rule__Layer__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
